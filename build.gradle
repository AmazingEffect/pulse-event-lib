plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'maven-publish'
}

group = 'com.pulse.common'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/release' }
}

// SpringBootPlugin을 비활성화 하고, BOM_CORDINATES를 사용합니다.
dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

dependencies {
	// Spring boot
	implementation 'org.springframework.boot:spring-boot-starter-web:3.3.1'

	// Spring kafka
	implementation 'org.springframework.kafka:spring-kafka:3.2.1'
	implementation 'org.springframework.retry:spring-retry:2.0.6'
	implementation 'org.springframework:spring-aspects:6.1.10'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
	// @ConfigurationProperties 사용시 필요
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

// bootJar 태스크를 비활성화하고 일반 jar 태스크를 활성화해야 합니다. 이를 통해 라이브러리로 사용할 수 있도록 합니다.
bootJar {
	enabled = false
}

jar {
	enabled = true
}

// sourcesJar 태스크를 추가하여 소스코드를 jar로 만들어 로컬 Maven 리포지토리에 배포합니다.
task sourcesJar(type: Jar) {
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

// publishToMavenLocal 태스크를 추가하여 로컬 Maven 리포지토리에 배포합니다.
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
		}
	}
	repositories {
		maven {
			name = "localRepo"
			url = uri("${System.getProperty('user.home')}/.m2/repository")
		}
	}
}
